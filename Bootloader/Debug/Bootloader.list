
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002978  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b54  08002b54  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b5c  08002b5c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001e4  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008cde  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d19  00000000  00000000  00028dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000818  00000000  00000000  0002aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000618  00000000  00000000  0002b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000209bc  00000000  00000000  0002b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b15e  00000000  00000000  0004c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2cdc  00000000  00000000  00057412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002214  00000000  00000000  0011a0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011c304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ae8 	.word	0x08002ae8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08002ae8 	.word	0x08002ae8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <jumpApp>:

#include "bootloader.h"
#include <string.h>

// Bu işlev, flash belleği izler ve kullanıcı uygulamasına geçip geçmeyeceğine karar verir
void jumpApp(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
    // Kullanıcı uygulamasının reset vektör adresi için işlev işaretçisi
    void (*user_app_reset_handler)(void);

    // Kullanıcı uygulamasının reset vektör adresini alın
    uint32_t user_app_reset_address = *((volatile uint32_t *)(FLASH_ADDRESS + 4));
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <jumpApp+0x20>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	607b      	str	r3, [r7, #4]

    // İşlev işaretçisini reset vektör adresine ayarlayın
    user_app_reset_handler = (void (*)(void))user_app_reset_address;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
    // Kullanıcı uygulamasına geçmeden önce tüm kesmeleri devre dışı bırakın
    __disable_irq();


    // Kullanıcı uygulamasına geçin
    user_app_reset_handler();
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	4798      	blx	r3
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	080e0004 	.word	0x080e0004

080004e8 <flashErase>:

// Bu işlev, belirtilen flash sayfasını siler
void flashErase(uint32_t sectorAddress) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 80004f0:	f000 fd2c 	bl	8000f4c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInit;
    eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
    eraseInit.Banks = FLASH_BANK_1;  // Bank 1 kullanılıyor
 80004f8:	2301      	movs	r3, #1
 80004fa:	613b      	str	r3, [r7, #16]
    eraseInit.Sector = GetFlashSector(sectorAddress);  // Sektör adresini belirtir
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f000 f82b 	bl	8000558 <GetFlashSector>
 8000502:	4603      	mov	r3, r0
 8000504:	617b      	str	r3, [r7, #20]
    eraseInit.NbSectors = 1;
 8000506:	2301      	movs	r3, #1
 8000508:	61bb      	str	r3, [r7, #24]

    uint32_t pageError = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
    HAL_FLASHEx_Erase(&eraseInit, &pageError);
 800050e:	f107 0208 	add.w	r2, r7, #8
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fe79 	bl	8001210 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 800051e:	f000 fd37 	bl	8000f90 <HAL_FLASH_Lock>
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <flashWrite>:

// Bu işlev, belirtilen bellek adresine veri yazar
void flashWrite(uint32_t data, uint32_t memAddress) {
 800052a:	b5b0      	push	{r4, r5, r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 8000534:	f000 fd0a 	bl	8000f4c <HAL_FLASH_Unlock>

    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memAddress, data);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	461c      	mov	r4, r3
 800053e:	4615      	mov	r5, r2
 8000540:	4622      	mov	r2, r4
 8000542:	462b      	mov	r3, r5
 8000544:	6839      	ldr	r1, [r7, #0]
 8000546:	2002      	movs	r0, #2
 8000548:	f000 fcac 	bl	8000ea4 <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 800054c:	f000 fd20 	bl	8000f90 <HAL_FLASH_Lock>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bdb0      	pop	{r4, r5, r7, pc}

08000558 <GetFlashSector>:
uint32_t *flashRead() {
    return (uint32_t *)FLASH_ADDRESS;
}

// Dönen değer, flash bellekteki sektör numarasıdır.
uint32_t GetFlashSector(uint32_t sector) {
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
    return sector / FLASH_SIZE; // Bellek boyutuna bölerek hangi sektöre denk geldiğini hesaplar
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	0adb      	lsrs	r3, r3, #11
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb3d 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f85d 	bl	8000638 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UART_Init();
 800057e:	f000 fa83 	bl	8000a88 <UART_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8ed 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f8c1 	bl	800070c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (USART_BytesToRead() >= MESSAGE_LENGTH) {
 800058a:	f000 fae9 	bl	8000b60 <USART_BytesToRead>
 800058e:	4603      	mov	r3, r0
 8000590:	2b1b      	cmp	r3, #27
 8000592:	d9fa      	bls.n	800058a <main+0x1a>
		  // Gelen veri uzunluğu beklenen mesaj uzunluğuna eşitse
		  char receivedMessageBuffer[MESSAGE_LENGTH];
		  for (int i = 0; i < MESSAGE_LENGTH; i++) {
 8000594:	2300      	movs	r3, #0
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000598:	e00c      	b.n	80005b4 <main+0x44>
			  receivedMessageBuffer[i] = (char)USART_ReadByte();
 800059a:	f000 fab3 	bl	8000b04 <USART_ReadByte>
 800059e:	4603      	mov	r3, r0
 80005a0:	b2d9      	uxtb	r1, r3
 80005a2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80005a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005a8:	4413      	add	r3, r2
 80005aa:	460a      	mov	r2, r1
 80005ac:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < MESSAGE_LENGTH; i++) {
 80005ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005b0:	3301      	adds	r3, #1
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005b6:	2b1b      	cmp	r3, #27
 80005b8:	ddef      	ble.n	800059a <main+0x2a>
		  }

		  // Gelen veriyi çözümle ve parsedMessage yapısına doldur
		  Message receivedMessage;
		  ErrorCode parseResult = parseMessage(receivedMessageBuffer, &receivedMessage);
 80005ba:	f107 0218 	add.w	r2, r7, #24
 80005be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f923 	bl	8000810 <parseMessage>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		  if (parseResult == NO_ERROR) {
 80005d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d124      	bne.n	8000622 <main+0xb2>
			  // Veri çözümlemesi başarılı olduysa
			  if (receivedMessage.komut == BOOTLOADER_COMMAND) {
 80005d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d11b      	bne.n	8000618 <main+0xa8>
				  // Gelen komut bootloader komutuysa
				  if (receivedMessage.emirNumarasi == BOOTLOADER_UPDATE_COMMAND) {
 80005e0:	8b3b      	ldrh	r3, [r7, #24]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d112      	bne.n	800060c <main+0x9c>
					  // Gelen komut bootloader güncelleme komutuysa
					  // Flash belleği sil ve yeni bootloader yazar
					  flashErase(FLASH_ADDRESS);
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <main+0xbc>)
 80005e8:	f7ff ff7e 	bl	80004e8 <flashErase>

					  flashWrite(&receivedMessage, FLASH_ADDRESS);
 80005ec:	f107 0318 	add.w	r3, r7, #24
 80005f0:	490e      	ldr	r1, [pc, #56]	; (800062c <main+0xbc>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff99 	bl	800052a <flashWrite>

					  // Yanıt mesajını oluştur ve gönder
					  Message responseMessage;
					  responseMessage.komut = BOOTLOADER_COMMAND;
 80005f8:	2301      	movs	r3, #1
 80005fa:	733b      	strb	r3, [r7, #12]
					  responseMessage.slaveNo = BOOTLOADER_UPDATE_SUCCESS;
 80005fc:	2303      	movs	r3, #3
 80005fe:	71bb      	strb	r3, [r7, #6]
					  USART_SendByteArray((uint8_t *)&responseMessage, sizeof(responseMessage));
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2114      	movs	r1, #20
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fab7 	bl	8000b78 <USART_SendByteArray>
 800060a:	e7be      	b.n	800058a <main+0x1a>
				  } else if (receivedMessage.emirNumarasi == BOOTLOADER_JUMP_COMMAND) {
 800060c:	8b3b      	ldrh	r3, [r7, #24]
 800060e:	2b04      	cmp	r3, #4
 8000610:	d1bb      	bne.n	800058a <main+0x1a>
					  // Gelen komut bootloader'a geçiş komutuysa
					  jumpApp(); // Kullanıcı uygulamasına geç
 8000612:	f7ff ff57 	bl	80004c4 <jumpApp>
 8000616:	e7b8      	b.n	800058a <main+0x1a>
				  }
			  } else {
				  	  USART_SendByteArray("Error! Check your command...", 30);
 8000618:	211e      	movs	r1, #30
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <main+0xc0>)
 800061c:	f000 faac 	bl	8000b78 <USART_SendByteArray>
 8000620:	e7b3      	b.n	800058a <main+0x1a>
			  }
		  } else {
			  	  USART_SendByteArray("Error! Check your data...", 30);
 8000622:	211e      	movs	r1, #30
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <main+0xc4>)
 8000626:	f000 faa7 	bl	8000b78 <USART_SendByteArray>
	  if (USART_BytesToRead() >= MESSAGE_LENGTH) {
 800062a:	e7ae      	b.n	800058a <main+0x1a>
 800062c:	080e0000 	.word	0x080e0000
 8000630:	08002b00 	.word	0x08002b00
 8000634:	08002b20 	.word	0x08002b20

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f9f6 	bl	8002a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f87f 	bl	80017c0 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f89c 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fae0 	bl	8001cb0 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f885 	bl	8000804 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f001 fc94 	bl	8002070 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f859 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000078 	.word	0x20000078
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_GPIO_Init+0x9c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <MX_GPIO_Init+0x9c>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_GPIO_Init+0x9c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_GPIO_Init+0x9c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_GPIO_Init+0x9c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_GPIO_Init+0x9c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <MX_GPIO_Init+0x9c>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_GPIO_Init+0x9c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <MX_GPIO_Init+0xa0>)
 80007d2:	f000 ffdb 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0xa0>)
 80007f0:	f000 fe30 	bl	8001454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020c00 	.word	0x40020c00

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <parseMessage>:
#include "parser.h"

// Gelen mesajı çözümleme işlevi
ErrorCode parseMessage(const char *message, Message *parsedMessage) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
    if (message[0] != START_CHAR) {
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2ba3      	cmp	r3, #163	; 0xa3
 8000820:	d001      	beq.n	8000826 <parseMessage+0x16>
        return INVALID_START; // Başlangıç karakteri kontrolü
 8000822:	2301      	movs	r3, #1
 8000824:	e047      	b.n	80008b6 <parseMessage+0xa6>
    }

    // Mesajın farklı bölümlerini çözümle ve parsedMessage yapısına doldur
    parsedMessage->emirNumarasi = *((uint16_t*)(message + 1)); // 2 byte: Emir Numarası
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	801a      	strh	r2, [r3, #0]
    parsedMessage->slaveNo = *((uint8_t*)(message + 5)); // 1 byte: Cihaz Numarası
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	795a      	ldrb	r2, [r3, #5]
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	709a      	strb	r2, [r3, #2]
    parsedMessage->emirAdresi = *((uint32_t*)(message + 7)); // 4 byte: Emir Adresi
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	605a      	str	r2, [r3, #4]
    parsedMessage->komut = *((status*)(message + 15)) % 2; // 1 byte: Komut
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	330f      	adds	r3, #15
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	721a      	strb	r2, [r3, #8]
    parsedMessage->dataType = *((DataType*)(message + 17)) % 3; // 1 byte: Veri Türü
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3311      	adds	r3, #17
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <parseMessage+0xb0>)
 800085a:	fba3 1302 	umull	r1, r3, r3, r2
 800085e:	0859      	lsrs	r1, r3, #1
 8000860:	460b      	mov	r3, r1
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	440b      	add	r3, r1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	b2da      	uxtb	r2, r3
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	725a      	strb	r2, [r3, #9]

    // Veri türüne göre farklı veri alanlarını çözümle
    switch (parsedMessage->dataType) {
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	7a5b      	ldrb	r3, [r3, #9]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d016      	beq.n	80008a4 <parseMessage+0x94>
 8000876:	2b02      	cmp	r3, #2
 8000878:	dc1a      	bgt.n	80008b0 <parseMessage+0xa0>
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <parseMessage+0x74>
 800087e:	2b01      	cmp	r3, #1
 8000880:	d00a      	beq.n	8000898 <parseMessage+0x88>
 8000882:	e015      	b.n	80008b0 <parseMessage+0xa0>
        case CHAR:
            strncpy(parsedMessage->data.charData, message + 19, sizeof(parsedMessage->data.charData));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	f103 000c 	add.w	r0, r3, #12
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3313      	adds	r3, #19
 800088e:	2208      	movs	r2, #8
 8000890:	4619      	mov	r1, r3
 8000892:	f002 f8d9 	bl	8002a48 <strncpy>
            break;
 8000896:	e00d      	b.n	80008b4 <parseMessage+0xa4>
        case FLOAT:
            parsedMessage->data.floatData = *((float*)(message + 19));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3313      	adds	r3, #19
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	60da      	str	r2, [r3, #12]
            break;
 80008a2:	e007      	b.n	80008b4 <parseMessage+0xa4>
        case INT:
            parsedMessage->data.intData = *((int*)(message + 19));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f8d3 2013 	ldr.w	r2, [r3, #19]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	60da      	str	r2, [r3, #12]
            break;
 80008ae:	e001      	b.n	80008b4 <parseMessage+0xa4>
        default:
            return INVALID_DATA_TYPE; // Geçersiz veri türü hatası
 80008b0:	2304      	movs	r3, #4
 80008b2:	e000      	b.n	80008b6 <parseMessage+0xa6>
    }
    return NO_ERROR; // Hata yok
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	aaaaaaab 	.word	0xaaaaaaab

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <HAL_UART_MspInit+0x84>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12b      	bne.n	800098e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_UART_MspInit+0x88>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_UART_MspInit+0x88>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_UART_MspInit+0x88>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_UART_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <HAL_UART_MspInit+0x88>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800096e:	230c      	movs	r3, #12
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097e:	2307      	movs	r3, #7
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_UART_MspInit+0x8c>)
 800098a:	f000 fd63 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40004400 	.word	0x40004400
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f952 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f002 f832 	bl	8002a90 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20020000 	.word	0x20020000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	200000bc 	.word	0x200000bc
 8000a60:	20000240 	.word	0x20000240

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <UART_Init>:

extern UART_HandleTypeDef huart2; // Kullandığınız UART periferine göre değiştirin

uartBufferT rxBuffer; // Alım tamponu

void UART_Init(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    // UART konfigürasyonu burada yapılır
    // İhtiyaca göre bu kısmı düzenleyin
    huart2.Init.BaudRate = 115200;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <UART_Init+0x74>)
 8000a8e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a92:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <UART_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <UART_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <UART_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <UART_Init+0x74>)
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <UART_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <UART_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]

    HAL_UART_Init(&huart2);
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <UART_Init+0x74>)
 8000aba:	f001 fad9 	bl	8002070 <HAL_UART_Init>

    // UART alım tamponunu başlat
    rxBuffer.buffer = malloc(RX_BUFFER_SIZE + 1); // RX_BUFFER_SIZE ihtiyaca göre tanımlanır
 8000abe:	201d      	movs	r0, #29
 8000ac0:	f001 ff06 	bl	80028d0 <malloc>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <UART_Init+0x78>)
 8000aca:	601a      	str	r2, [r3, #0]
    rxBuffer.size = RX_BUFFER_SIZE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <UART_Init+0x78>)
 8000ace:	221c      	movs	r2, #28
 8000ad0:	60da      	str	r2, [r3, #12]
    rxBuffer.head = 0;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <UART_Init+0x78>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
    rxBuffer.tail = 0;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <UART_Init+0x78>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
    rxBuffer.count = 0;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <UART_Init+0x78>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
    HAL_UART_Receive_IT(&huart2, &rxBuffer.buffer[rxBuffer.tail], 1); // Alım kesmesini başlat
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <UART_Init+0x78>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <UART_Init+0x78>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4413      	add	r3, r2
 8000aee:	2201      	movs	r2, #1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4802      	ldr	r0, [pc, #8]	; (8000afc <UART_Init+0x74>)
 8000af4:	f001 fb9b 	bl	800222e <HAL_UART_Receive_IT>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000078 	.word	0x20000078
 8000b00:	200000c0 	.word	0x200000c0

08000b04 <USART_ReadByte>:
uint8_t USART_IsBuffEmpty(volatile uartBufferT* buffer) {
    return (buffer->count == 0);
}

// Bir byte okuma
int32_t USART_ReadByte() {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
    if (rxBuffer.count > 0) {
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <USART_ReadByte+0x58>)
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d01b      	beq.n	8000b4a <USART_ReadByte+0x46>
        int32_t value = rxBuffer.buffer[rxBuffer.head++];
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <USART_ReadByte+0x58>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <USART_ReadByte+0x58>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	1c59      	adds	r1, r3, #1
 8000b1c:	480f      	ldr	r0, [pc, #60]	; (8000b5c <USART_ReadByte+0x58>)
 8000b1e:	6041      	str	r1, [r0, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	607b      	str	r3, [r7, #4]
        rxBuffer.head %= rxBuffer.size;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <USART_ReadByte+0x58>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <USART_ReadByte+0x58>)
 8000b2c:	68d2      	ldr	r2, [r2, #12]
 8000b2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b32:	fb01 f202 	mul.w	r2, r1, r2
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <USART_ReadByte+0x58>)
 8000b3a:	6053      	str	r3, [r2, #4]
        rxBuffer.count--;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <USART_ReadByte+0x58>)
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <USART_ReadByte+0x58>)
 8000b44:	6113      	str	r3, [r2, #16]
        return value;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	e001      	b.n	8000b4e <USART_ReadByte+0x4a>
    }
    return -1; // Veri yok
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200000c0 	.word	0x200000c0

08000b60 <USART_BytesToRead>:

// Okunmayı bekleyen byte sayısını döndürme
uint32_t USART_BytesToRead() {
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
    return rxBuffer.count;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <USART_BytesToRead+0x14>)
 8000b66:	691b      	ldr	r3, [r3, #16]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200000c0 	.word	0x200000c0

08000b78 <USART_SendByteArray>:

// Byte dizisi gönderme
void USART_SendByteArray(uint8_t* buffer, uint32_t size) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart2, buffer, size, HAL_MAX_DELAY);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <USART_SendByteArray+0x24>)
 8000b8e:	f001 fabc 	bl	800210a <HAL_UART_Transmit>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000078 	.word	0x20000078

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	; (8000bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ff4b 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f001 ff65 	bl	8002a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fccd 	bl	8000570 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000be4:	08002b64 	.word	0x08002b64
  ldr r2, =_sbss
 8000be8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bec:	20000240 	.word	0x20000240

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f90d 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe4c 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f917 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f8ed 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	200000d4 	.word	0x200000d4

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200000d4 	.word	0x200000d4

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff47 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff5c 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff8e 	bl	8000d90 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffb0 	bl	8000df8 <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <HAL_FLASH_Program+0xa0>)
 8000eb8:	7e1b      	ldrb	r3, [r3, #24]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_FLASH_Program+0x1e>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e03b      	b.n	8000f3a <HAL_FLASH_Program+0x96>
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <HAL_FLASH_Program+0xa0>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ec8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ecc:	f000 f870 	bl	8000fb0 <FLASH_WaitForLastOperation>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d12b      	bne.n	8000f32 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000ee0:	783b      	ldrb	r3, [r7, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f000 f91b 	bl	8001120 <FLASH_Program_Byte>
 8000eea:	e016      	b.n	8000f1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d105      	bne.n	8000efe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000ef2:	883b      	ldrh	r3, [r7, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f000 f8ee 	bl	80010d8 <FLASH_Program_HalfWord>
 8000efc:	e00d      	b.n	8000f1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d105      	bne.n	8000f10 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	68b8      	ldr	r0, [r7, #8]
 8000f0a:	f000 f8c3 	bl	8001094 <FLASH_Program_Word>
 8000f0e:	e004      	b.n	8000f1a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f14:	68b8      	ldr	r0, [r7, #8]
 8000f16:	f000 f88b 	bl	8001030 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f1e:	f000 f847 	bl	8000fb0 <FLASH_WaitForLastOperation>
 8000f22:	4603      	mov	r3, r0
 8000f24:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_FLASH_Program+0xa4>)
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_FLASH_Program+0xa4>)
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <HAL_FLASH_Program+0xa0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000d8 	.word	0x200000d8
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_FLASH_Unlock+0x38>)
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da0b      	bge.n	8000f76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_FLASH_Unlock+0x38>)
 8000f60:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_FLASH_Unlock+0x3c>)
 8000f62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <HAL_FLASH_Unlock+0x38>)
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <HAL_FLASH_Unlock+0x40>)
 8000f68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_FLASH_Unlock+0x38>)
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da01      	bge.n	8000f76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40023c00 	.word	0x40023c00
 8000f88:	45670123 	.word	0x45670123
 8000f8c:	cdef89ab 	.word	0xcdef89ab

08000f90 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_FLASH_Lock+0x1c>)
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_FLASH_Lock+0x1c>)
 8000f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <FLASH_WaitForLastOperation+0x78>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc2:	f7ff fe7d 	bl	8000cc0 <HAL_GetTick>
 8000fc6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000fc8:	e010      	b.n	8000fec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d00c      	beq.n	8000fec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <FLASH_WaitForLastOperation+0x38>
 8000fd8:	f7ff fe72 	bl	8000cc0 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d201      	bcs.n	8000fec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e019      	b.n	8001020 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <FLASH_WaitForLastOperation+0x7c>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e8      	bne.n	8000fca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <FLASH_WaitForLastOperation+0x7c>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <FLASH_WaitForLastOperation+0x7c>)
 8001006:	2201      	movs	r2, #1
 8001008:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <FLASH_WaitForLastOperation+0x7c>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001016:	f000 f8a5 	bl	8001164 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
  
}  
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200000d8 	.word	0x200000d8
 800102c:	40023c00 	.word	0x40023c00

08001030 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <FLASH_Program_DoubleWord+0x60>)
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <FLASH_Program_DoubleWord+0x60>)
 8001042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001046:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <FLASH_Program_DoubleWord+0x60>)
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	4a10      	ldr	r2, [pc, #64]	; (8001090 <FLASH_Program_DoubleWord+0x60>)
 800104e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <FLASH_Program_DoubleWord+0x60>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <FLASH_Program_DoubleWord+0x60>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001066:	f3bf 8f6f 	isb	sy
}
 800106a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800106c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	000a      	movs	r2, r1
 800107a:	2300      	movs	r3, #0
 800107c:	68f9      	ldr	r1, [r7, #12]
 800107e:	3104      	adds	r1, #4
 8001080:	4613      	mov	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40023c00 	.word	0x40023c00

08001094 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <FLASH_Program_Word+0x40>)
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <FLASH_Program_Word+0x40>)
 80010a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <FLASH_Program_Word+0x40>)
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <FLASH_Program_Word+0x40>)
 80010b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <FLASH_Program_Word+0x40>)
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <FLASH_Program_Word+0x40>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <FLASH_Program_HalfWord+0x44>)
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	4a0c      	ldr	r2, [pc, #48]	; (800111c <FLASH_Program_HalfWord+0x44>)
 80010ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <FLASH_Program_HalfWord+0x44>)
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4a09      	ldr	r2, [pc, #36]	; (800111c <FLASH_Program_HalfWord+0x44>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <FLASH_Program_HalfWord+0x44>)
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <FLASH_Program_HalfWord+0x44>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	801a      	strh	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023c00 	.word	0x40023c00

08001120 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <FLASH_Program_Byte+0x40>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <FLASH_Program_Byte+0x40>)
 8001132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <FLASH_Program_Byte+0x40>)
 800113a:	4a09      	ldr	r2, [pc, #36]	; (8001160 <FLASH_Program_Byte+0x40>)
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <FLASH_Program_Byte+0x40>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <FLASH_Program_Byte+0x40>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <FLASH_SetErrorCode+0xa8>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	4a23      	ldr	r2, [pc, #140]	; (800120c <FLASH_SetErrorCode+0xa8>)
 800117e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 8001182:	2210      	movs	r2, #16
 8001184:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <FLASH_SetErrorCode+0xa8>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <FLASH_SetErrorCode+0xa8>)
 800119c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 80011a0:	2220      	movs	r2, #32
 80011a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <FLASH_SetErrorCode+0xa8>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <FLASH_SetErrorCode+0xa8>)
 80011ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d008      	beq.n	80011e0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <FLASH_SetErrorCode+0xa8>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <FLASH_SetErrorCode+0xa8>)
 80011d8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <FLASH_SetErrorCode+0xa8>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <FLASH_SetErrorCode+0xa8>)
 80011f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <FLASH_SetErrorCode+0xa4>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	60da      	str	r2, [r3, #12]
  }
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40023c00 	.word	0x40023c00
 800120c:	200000d8 	.word	0x200000d8

08001210 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_FLASHEx_Erase+0xd8>)
 8001224:	7e1b      	ldrb	r3, [r3, #24]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_FLASHEx_Erase+0x1e>
 800122a:	2302      	movs	r3, #2
 800122c:	e058      	b.n	80012e0 <HAL_FLASHEx_Erase+0xd0>
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_FLASHEx_Erase+0xd8>)
 8001230:	2201      	movs	r2, #1
 8001232:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001234:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001238:	f7ff feba 	bl	8000fb0 <FLASH_WaitForLastOperation>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d148      	bne.n	80012d8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d115      	bne.n	8001282 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f000 f844 	bl	80012f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001268:	f24c 3050 	movw	r0, #50000	; 0xc350
 800126c:	f7ff fea0 	bl	8000fb0 <FLASH_WaitForLastOperation>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_FLASHEx_Erase+0xdc>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <HAL_FLASHEx_Erase+0xdc>)
 800127a:	f023 0304 	bic.w	r3, r3, #4
 800127e:	6113      	str	r3, [r2, #16]
 8001280:	e028      	b.n	80012d4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	e01c      	b.n	80012c4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f000 f850 	bl	8001338 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001298:	f24c 3050 	movw	r0, #50000	; 0xc350
 800129c:	f7ff fe88 	bl	8000fb0 <FLASH_WaitForLastOperation>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_FLASHEx_Erase+0xdc>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_FLASHEx_Erase+0xdc>)
 80012aa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80012ae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	601a      	str	r2, [r3, #0]
          break;
 80012bc:	e00a      	b.n	80012d4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4413      	add	r3, r2
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3da      	bcc.n	800128a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80012d4:	f000 f878 	bl	80013c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_FLASHEx_Erase+0xd8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	761a      	strb	r2, [r3, #24]

  return status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000d8 	.word	0x200000d8
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <FLASH_MassErase+0x44>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <FLASH_MassErase+0x44>)
 8001302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001306:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <FLASH_MassErase+0x44>)
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	4a09      	ldr	r2, [pc, #36]	; (8001334 <FLASH_MassErase+0x44>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <FLASH_MassErase+0x44>)
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4313      	orrs	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <FLASH_MassErase+0x44>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6113      	str	r3, [r2, #16]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	e010      	b.n	8001376 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d103      	bne.n	8001362 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800135a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e009      	b.n	8001376 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d103      	bne.n	8001370 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e002      	b.n	8001376 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001370:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001374:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 800137c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001380:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	490f      	ldr	r1, [pc, #60]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 8001394:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001398:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <FLASH_Erase_Sector+0x8c>)
 80013b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b6:	6113      	str	r3, [r2, #16]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <FLASH_FlushCaches+0x88>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d017      	beq.n	8001408 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <FLASH_FlushCaches+0x88>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <FLASH_FlushCaches+0x88>)
 80013de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <FLASH_FlushCaches+0x88>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	; (8001450 <FLASH_FlushCaches+0x88>)
 80013ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <FLASH_FlushCaches+0x88>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <FLASH_FlushCaches+0x88>)
 80013f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <FLASH_FlushCaches+0x88>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a13      	ldr	r2, [pc, #76]	; (8001450 <FLASH_FlushCaches+0x88>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <FLASH_FlushCaches+0x88>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	2b00      	cmp	r3, #0
 8001412:	d017      	beq.n	8001444 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <FLASH_FlushCaches+0x88>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <FLASH_FlushCaches+0x88>)
 800141a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800141e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <FLASH_FlushCaches+0x88>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <FLASH_FlushCaches+0x88>)
 8001426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <FLASH_FlushCaches+0x88>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <FLASH_FlushCaches+0x88>)
 8001432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001436:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <FLASH_FlushCaches+0x88>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <FLASH_FlushCaches+0x88>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001442:	6013      	str	r3, [r2, #0]
  }
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e16b      	b.n	8001748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 815a 	bne.w	8001742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80b4 	beq.w	8001742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a5f      	ldr	r2, [pc, #380]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a5b      	ldr	r2, [pc, #364]	; (8001764 <HAL_GPIO_Init+0x310>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_GPIO_Init+0x314>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d02b      	beq.n	800167a <HAL_GPIO_Init+0x226>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_GPIO_Init+0x318>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d025      	beq.n	8001676 <HAL_GPIO_Init+0x222>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a50      	ldr	r2, [pc, #320]	; (8001770 <HAL_GPIO_Init+0x31c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01f      	beq.n	8001672 <HAL_GPIO_Init+0x21e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4f      	ldr	r2, [pc, #316]	; (8001774 <HAL_GPIO_Init+0x320>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4e      	ldr	r2, [pc, #312]	; (8001778 <HAL_GPIO_Init+0x324>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x216>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4d      	ldr	r2, [pc, #308]	; (800177c <HAL_GPIO_Init+0x328>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_GPIO_Init+0x32c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_GPIO_Init+0x330>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x20a>
 800165a:	2307      	movs	r3, #7
 800165c:	e00e      	b.n	800167c <HAL_GPIO_Init+0x228>
 800165e:	2308      	movs	r3, #8
 8001660:	e00c      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001662:	2306      	movs	r3, #6
 8001664:	e00a      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001666:	2305      	movs	r3, #5
 8001668:	e008      	b.n	800167c <HAL_GPIO_Init+0x228>
 800166a:	2304      	movs	r3, #4
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x228>
 800166e:	2303      	movs	r3, #3
 8001670:	e004      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001672:	2302      	movs	r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x228>
 800167a:	2300      	movs	r3, #0
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f002 0203 	and.w	r2, r2, #3
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4093      	lsls	r3, r2
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800168c:	4935      	ldr	r1, [pc, #212]	; (8001764 <HAL_GPIO_Init+0x310>)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <HAL_GPIO_Init+0x334>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e8:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_GPIO_Init+0x334>)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_GPIO_Init+0x334>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_GPIO_Init+0x334>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	f67f ae90 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40013800 	.word	0x40013800
 8001768:	40020000 	.word	0x40020000
 800176c:	40020400 	.word	0x40020400
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40021000 	.word	0x40021000
 800177c:	40021400 	.word	0x40021400
 8001780:	40021800 	.word	0x40021800
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40013c00 	.word	0x40013c00

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e267      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d075      	beq.n	80018ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017de:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d00c      	beq.n	8001804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ea:	4b85      	ldr	r3, [pc, #532]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d112      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f6:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001802:	d10b      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4b7e      	ldr	r3, [pc, #504]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05b      	beq.n	80018c8 <HAL_RCC_OscConfig+0x108>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d157      	bne.n	80018c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e242      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x74>
 8001826:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a75      	ldr	r2, [pc, #468]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b70      	ldr	r3, [pc, #448]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6f      	ldr	r2, [pc, #444]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6c      	ldr	r2, [pc, #432]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001858:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a68      	ldr	r2, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a65      	ldr	r2, [pc, #404]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fa22 	bl	8000cc0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fa1e 	bl	8000cc0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e207      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xc0>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa0e 	bl	8000cc0 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fa0a 	bl	8000cc0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1f3      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0xe8>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d063      	beq.n	800199e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018d6:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e2:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d11c      	bne.n	8001928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ee:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x152>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1c7      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	e03a      	b.n	800199e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001930:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_RCC_OscConfig+0x244>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff f9c3 	bl	8000cc0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff f9bf 	bl	8000cc0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e1a8      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4925      	ldr	r1, [pc, #148]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_OscConfig+0x244>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f9a2 	bl	8000cc0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff f99e 	bl	8000cc0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e187      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d036      	beq.n	8001a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d016      	beq.n	80019e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_RCC_OscConfig+0x248>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f982 	bl	8000cc0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff f97e 	bl	8000cc0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e167      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80019d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x200>
 80019de:	e01b      	b.n	8001a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_OscConfig+0x248>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff f96b 	bl	8000cc0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	e00e      	b.n	8001a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ee:	f7ff f967 	bl	8000cc0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d907      	bls.n	8001a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e150      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
 8001a00:	40023800 	.word	0x40023800
 8001a04:	42470000 	.word	0x42470000
 8001a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ea      	bne.n	80019ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8097 	beq.w	8001b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b81      	ldr	r3, [pc, #516]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b7d      	ldr	r3, [pc, #500]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a7c      	ldr	r2, [pc, #496]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b77      	ldr	r3, [pc, #476]	; (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d118      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b74      	ldr	r3, [pc, #464]	; (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a73      	ldr	r2, [pc, #460]	; (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f927 	bl	8000cc0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a76:	f7ff f923 	bl	8000cc0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e10c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2ea>
 8001a9c:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	4a63      	ldr	r2, [pc, #396]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x324>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b05      	cmp	r3, #5
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x30c>
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a5e      	ldr	r2, [pc, #376]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	4b5c      	ldr	r3, [pc, #368]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	4a5b      	ldr	r2, [pc, #364]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x324>
 8001acc:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001adc:	4a54      	ldr	r2, [pc, #336]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d015      	beq.n	8001b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f8e8 	bl	8000cc0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff f8e4 	bl	8000cc0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0cb      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0ee      	beq.n	8001af4 <HAL_RCC_OscConfig+0x334>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7ff f8d2 	bl	8000cc0 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff f8ce 	bl	8000cc0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0b5      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b36:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ee      	bne.n	8001b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a1 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d05c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d141      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f8a2 	bl	8000cc0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff f89e 	bl	8000cc0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e087      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69da      	ldr	r2, [r3, #28]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	019b      	lsls	r3, r3, #6
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	061b      	lsls	r3, r3, #24
 8001bc2:	491b      	ldr	r1, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff f877 	bl	8000cc0 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff f873 	bl	8000cc0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e05c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x416>
 8001bf4:	e054      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f860 	bl	8000cc0 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f85c 	bl	8000cc0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e045      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x444>
 8001c22:	e03d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e038      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x4ec>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d028      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d121      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d11a      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d111      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	3b01      	subs	r3, #1
 8001c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0cc      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d90c      	bls.n	8001cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d044      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d119      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e067      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4934      	ldr	r1, [pc, #208]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7fe ff8e 	bl	8000cc0 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7fe ff8a 	bl	8000cc0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e04f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d20c      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490a      	ldr	r1, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe feee 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	08002b3c 	.word	0x08002b3c
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e80:	b090      	sub	sp, #64	; 0x40
 8001e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e94:	4b59      	ldr	r3, [pc, #356]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d00d      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x40>
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	f200 80a1 	bhi.w	8001fe8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eae:	e09b      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001eb4:	e09b      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eb6:	4b53      	ldr	r3, [pc, #332]	; (8002004 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eba:	e098      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec6:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d028      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	2200      	movs	r2, #0
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	627a      	str	r2, [r7, #36]	; 0x24
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ee8:	fb03 f201 	mul.w	r2, r3, r1
 8001eec:	2300      	movs	r3, #0
 8001eee:	fb00 f303 	mul.w	r3, r0, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a43      	ldr	r2, [pc, #268]	; (8002004 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ef6:	fba0 1202 	umull	r1, r2, r0, r2
 8001efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001efc:	460a      	mov	r2, r1
 8001efe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f02:	4413      	add	r3, r2
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	61fa      	str	r2, [r7, #28]
 8001f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f16:	f7fe f957 	bl	80001c8 <__aeabi_uldivmod>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4613      	mov	r3, r2
 8001f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f22:	e053      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	617a      	str	r2, [r7, #20]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f36:	f04f 0b00 	mov.w	fp, #0
 8001f3a:	4652      	mov	r2, sl
 8001f3c:	465b      	mov	r3, fp
 8001f3e:	f04f 0000 	mov.w	r0, #0
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	0159      	lsls	r1, r3, #5
 8001f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4c:	0150      	lsls	r0, r2, #5
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	ebb2 080a 	subs.w	r8, r2, sl
 8001f56:	eb63 090b 	sbc.w	r9, r3, fp
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001f72:	eb63 0509 	sbc.w	r5, r3, r9
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	00eb      	lsls	r3, r5, #3
 8001f80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f84:	00e2      	lsls	r2, r4, #3
 8001f86:	4614      	mov	r4, r2
 8001f88:	461d      	mov	r5, r3
 8001f8a:	eb14 030a 	adds.w	r3, r4, sl
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	eb45 030b 	adc.w	r3, r5, fp
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	028b      	lsls	r3, r1, #10
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fac:	4621      	mov	r1, r4
 8001fae:	028a      	lsls	r2, r1, #10
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	60fa      	str	r2, [r7, #12]
 8001fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc0:	f7fe f902 	bl	80001c8 <__aeabi_uldivmod>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0c1b      	lsrs	r3, r3, #16
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fe6:	e002      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3740      	adds	r7, #64	; 0x40
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	00f42400 	.word	0x00f42400
 8002004:	017d7840 	.word	0x017d7840

08002008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_RCC_GetHCLKFreq+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000

08002020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002024:	f7ff fff0 	bl	8002008 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0a9b      	lsrs	r3, r3, #10
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	08002b4c 	.word	0x08002b4c

08002048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800204c:	f7ff ffdc 	bl	8002008 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0b5b      	lsrs	r3, r3, #13
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4903      	ldr	r1, [pc, #12]	; (800206c <HAL_RCC_GetPCLK2Freq+0x24>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	08002b4c 	.word	0x08002b4c

08002070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e03f      	b.n	8002102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fc3c 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2224      	movs	r2, #36	; 0x24
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f997 	bl	80023e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b08a      	sub	sp, #40	; 0x28
 800210e:	af02      	add	r7, sp, #8
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b20      	cmp	r3, #32
 8002128:	d17c      	bne.n	8002224 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_UART_Transmit+0x2c>
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e075      	b.n	8002226 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_UART_Transmit+0x3e>
 8002144:	2302      	movs	r3, #2
 8002146:	e06e      	b.n	8002226 <HAL_UART_Transmit+0x11c>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2221      	movs	r2, #33	; 0x21
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800215e:	f7fe fdaf 	bl	8000cc0 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	88fa      	ldrh	r2, [r7, #6]
 8002168:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	88fa      	ldrh	r2, [r7, #6]
 800216e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002178:	d108      	bne.n	800218c <HAL_UART_Transmit+0x82>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	e003      	b.n	8002194 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800219c:	e02a      	b.n	80021f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2200      	movs	r2, #0
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f870 	bl	800228e <UART_WaitOnFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e036      	b.n	8002226 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10b      	bne.n	80021d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	3302      	adds	r3, #2
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	e007      	b.n	80021e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	3301      	adds	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1cf      	bne.n	800219e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	2140      	movs	r1, #64	; 0x40
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f840 	bl	800228e <UART_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e006      	b.n	8002226 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e000      	b.n	8002226 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002224:	2302      	movs	r3, #2
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	4613      	mov	r3, r2
 800223a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	d11d      	bne.n	8002284 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_UART_Receive_IT+0x26>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e016      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_UART_Receive_IT+0x38>
 8002262:	2302      	movs	r3, #2
 8002264:	e00f      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	461a      	mov	r2, r3
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f875 	bl	800236a <UART_Start_Receive_IT>
 8002280:	4603      	mov	r3, r0
 8002282:	e000      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b090      	sub	sp, #64	; 0x40
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800229e:	e050      	b.n	8002342 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a6:	d04c      	beq.n	8002342 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0x30>
 80022ae:	f7fe fd07 	bl	8000cc0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d241      	bcs.n	8002342 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022de:	637a      	str	r2, [r7, #52]	; 0x34
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e6:	e841 2300 	strex	r3, r2, [r1]
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1e5      	bne.n	80022be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3314      	adds	r3, #20
 80022f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	613b      	str	r3, [r7, #16]
   return(result);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002312:	623a      	str	r2, [r7, #32]
 8002314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002316:	69f9      	ldr	r1, [r7, #28]
 8002318:	6a3a      	ldr	r2, [r7, #32]
 800231a:	e841 2300 	strex	r3, r2, [r1]
 800231e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1e5      	bne.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e00f      	b.n	8002362 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	429a      	cmp	r2, r3
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	429a      	cmp	r2, r3
 800235e:	d09f      	beq.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3740      	adds	r7, #64	; 0x40
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	4613      	mov	r3, r2
 8002376:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2222      	movs	r2, #34	; 0x22
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b0c0      	sub	sp, #256	; 0x100
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	68d9      	ldr	r1, [r3, #12]
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	ea40 0301 	orr.w	r3, r0, r1
 8002410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	431a      	orrs	r2, r3
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002440:	f021 010c 	bic.w	r1, r1, #12
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800244e:	430b      	orrs	r3, r1
 8002450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002462:	6999      	ldr	r1, [r3, #24]
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	ea40 0301 	orr.w	r3, r0, r1
 800246e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b8f      	ldr	r3, [pc, #572]	; (80026b4 <UART_SetConfig+0x2cc>)
 8002478:	429a      	cmp	r2, r3
 800247a:	d005      	beq.n	8002488 <UART_SetConfig+0xa0>
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b8d      	ldr	r3, [pc, #564]	; (80026b8 <UART_SetConfig+0x2d0>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d104      	bne.n	8002492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002488:	f7ff fdde 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 800248c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002490:	e003      	b.n	800249a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002492:	f7ff fdc5 	bl	8002020 <HAL_RCC_GetPCLK1Freq>
 8002496:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a4:	f040 810c 	bne.w	80026c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	1891      	adds	r1, r2, r2
 80024c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80024c2:	415b      	adcs	r3, r3
 80024c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024ca:	4621      	mov	r1, r4
 80024cc:	eb12 0801 	adds.w	r8, r2, r1
 80024d0:	4629      	mov	r1, r5
 80024d2:	eb43 0901 	adc.w	r9, r3, r1
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	eb18 0303 	adds.w	r3, r8, r3
 80024f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024f8:	462b      	mov	r3, r5
 80024fa:	eb49 0303 	adc.w	r3, r9, r3
 80024fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800250e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002516:	460b      	mov	r3, r1
 8002518:	18db      	adds	r3, r3, r3
 800251a:	653b      	str	r3, [r7, #80]	; 0x50
 800251c:	4613      	mov	r3, r2
 800251e:	eb42 0303 	adc.w	r3, r2, r3
 8002522:	657b      	str	r3, [r7, #84]	; 0x54
 8002524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800252c:	f7fd fe4c 	bl	80001c8 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4b61      	ldr	r3, [pc, #388]	; (80026bc <UART_SetConfig+0x2d4>)
 8002536:	fba3 2302 	umull	r2, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	011c      	lsls	r4, r3, #4
 800253e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002548:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800254c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002550:	4642      	mov	r2, r8
 8002552:	464b      	mov	r3, r9
 8002554:	1891      	adds	r1, r2, r2
 8002556:	64b9      	str	r1, [r7, #72]	; 0x48
 8002558:	415b      	adcs	r3, r3
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800255c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002560:	4641      	mov	r1, r8
 8002562:	eb12 0a01 	adds.w	sl, r2, r1
 8002566:	4649      	mov	r1, r9
 8002568:	eb43 0b01 	adc.w	fp, r3, r1
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800257c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002580:	4692      	mov	sl, r2
 8002582:	469b      	mov	fp, r3
 8002584:	4643      	mov	r3, r8
 8002586:	eb1a 0303 	adds.w	r3, sl, r3
 800258a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800258e:	464b      	mov	r3, r9
 8002590:	eb4b 0303 	adc.w	r3, fp, r3
 8002594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025ac:	460b      	mov	r3, r1
 80025ae:	18db      	adds	r3, r3, r3
 80025b0:	643b      	str	r3, [r7, #64]	; 0x40
 80025b2:	4613      	mov	r3, r2
 80025b4:	eb42 0303 	adc.w	r3, r2, r3
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025c2:	f7fd fe01 	bl	80001c8 <__aeabi_uldivmod>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <UART_SetConfig+0x2d4>)
 80025ce:	fba3 2301 	umull	r2, r3, r3, r1
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2264      	movs	r2, #100	; 0x64
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	1acb      	subs	r3, r1, r3
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <UART_SetConfig+0x2d4>)
 80025e4:	fba3 2302 	umull	r2, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025f0:	441c      	add	r4, r3
 80025f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	1891      	adds	r1, r2, r2
 800260a:	63b9      	str	r1, [r7, #56]	; 0x38
 800260c:	415b      	adcs	r3, r3
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002614:	4641      	mov	r1, r8
 8002616:	1851      	adds	r1, r2, r1
 8002618:	6339      	str	r1, [r7, #48]	; 0x30
 800261a:	4649      	mov	r1, r9
 800261c:	414b      	adcs	r3, r1
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800262c:	4659      	mov	r1, fp
 800262e:	00cb      	lsls	r3, r1, #3
 8002630:	4651      	mov	r1, sl
 8002632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002636:	4651      	mov	r1, sl
 8002638:	00ca      	lsls	r2, r1, #3
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4603      	mov	r3, r0
 8002640:	4642      	mov	r2, r8
 8002642:	189b      	adds	r3, r3, r2
 8002644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002648:	464b      	mov	r3, r9
 800264a:	460a      	mov	r2, r1
 800264c:	eb42 0303 	adc.w	r3, r2, r3
 8002650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002660:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002668:	460b      	mov	r3, r1
 800266a:	18db      	adds	r3, r3, r3
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
 800266e:	4613      	mov	r3, r2
 8002670:	eb42 0303 	adc.w	r3, r2, r3
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800267a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800267e:	f7fd fda3 	bl	80001c8 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <UART_SetConfig+0x2d4>)
 8002688:	fba3 1302 	umull	r1, r3, r3, r2
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	2164      	movs	r1, #100	; 0x64
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	3332      	adds	r3, #50	; 0x32
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <UART_SetConfig+0x2d4>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	f003 0207 	and.w	r2, r3, #7
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4422      	add	r2, r4
 80026ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026b0:	e106      	b.n	80028c0 <UART_SetConfig+0x4d8>
 80026b2:	bf00      	nop
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40011400 	.word	0x40011400
 80026bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026d2:	4642      	mov	r2, r8
 80026d4:	464b      	mov	r3, r9
 80026d6:	1891      	adds	r1, r2, r2
 80026d8:	6239      	str	r1, [r7, #32]
 80026da:	415b      	adcs	r3, r3
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026e2:	4641      	mov	r1, r8
 80026e4:	1854      	adds	r4, r2, r1
 80026e6:	4649      	mov	r1, r9
 80026e8:	eb43 0501 	adc.w	r5, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	00eb      	lsls	r3, r5, #3
 80026f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	4643      	mov	r3, r8
 8002702:	18e3      	adds	r3, r4, r3
 8002704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002708:	464b      	mov	r3, r9
 800270a:	eb45 0303 	adc.w	r3, r5, r3
 800270e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800271e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800272e:	4629      	mov	r1, r5
 8002730:	008b      	lsls	r3, r1, #2
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002738:	4621      	mov	r1, r4
 800273a:	008a      	lsls	r2, r1, #2
 800273c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002740:	f7fd fd42 	bl	80001c8 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4b60      	ldr	r3, [pc, #384]	; (80028cc <UART_SetConfig+0x4e4>)
 800274a:	fba3 2302 	umull	r2, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	011c      	lsls	r4, r3, #4
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800275c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	61b9      	str	r1, [r7, #24]
 800276c:	415b      	adcs	r3, r3
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002774:	4641      	mov	r1, r8
 8002776:	1851      	adds	r1, r2, r1
 8002778:	6139      	str	r1, [r7, #16]
 800277a:	4649      	mov	r1, r9
 800277c:	414b      	adcs	r3, r1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800278c:	4659      	mov	r1, fp
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4651      	mov	r1, sl
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4642      	mov	r2, r8
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027a8:	464b      	mov	r3, r9
 80027aa:	460a      	mov	r2, r1
 80027ac:	eb42 0303 	adc.w	r3, r2, r3
 80027b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80027be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027cc:	4649      	mov	r1, r9
 80027ce:	008b      	lsls	r3, r1, #2
 80027d0:	4641      	mov	r1, r8
 80027d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d6:	4641      	mov	r1, r8
 80027d8:	008a      	lsls	r2, r1, #2
 80027da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027de:	f7fd fcf3 	bl	80001c8 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	4b38      	ldr	r3, [pc, #224]	; (80028cc <UART_SetConfig+0x4e4>)
 80027ea:	fba3 2301 	umull	r2, r3, r3, r1
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2264      	movs	r2, #100	; 0x64
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	1acb      	subs	r3, r1, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	; 0x32
 80027fc:	4a33      	ldr	r2, [pc, #204]	; (80028cc <UART_SetConfig+0x4e4>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	441c      	add	r4, r3
 800280a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280e:	2200      	movs	r2, #0
 8002810:	673b      	str	r3, [r7, #112]	; 0x70
 8002812:	677a      	str	r2, [r7, #116]	; 0x74
 8002814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	415b      	adcs	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002828:	4641      	mov	r1, r8
 800282a:	1851      	adds	r1, r2, r1
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002840:	4659      	mov	r1, fp
 8002842:	00cb      	lsls	r3, r1, #3
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284a:	4651      	mov	r1, sl
 800284c:	00ca      	lsls	r2, r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4603      	mov	r3, r0
 8002854:	4642      	mov	r2, r8
 8002856:	189b      	adds	r3, r3, r2
 8002858:	66bb      	str	r3, [r7, #104]	; 0x68
 800285a:	464b      	mov	r3, r9
 800285c:	460a      	mov	r2, r1
 800285e:	eb42 0303 	adc.w	r3, r2, r3
 8002862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	663b      	str	r3, [r7, #96]	; 0x60
 800286e:	667a      	str	r2, [r7, #100]	; 0x64
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800287c:	4649      	mov	r1, r9
 800287e:	008b      	lsls	r3, r1, #2
 8002880:	4641      	mov	r1, r8
 8002882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002886:	4641      	mov	r1, r8
 8002888:	008a      	lsls	r2, r1, #2
 800288a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800288e:	f7fd fc9b 	bl	80001c8 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <UART_SetConfig+0x4e4>)
 8002898:	fba3 1302 	umull	r1, r3, r3, r2
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	2164      	movs	r1, #100	; 0x64
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	3332      	adds	r3, #50	; 0x32
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <UART_SetConfig+0x4e4>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4422      	add	r2, r4
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028cc:	51eb851f 	.word	0x51eb851f

080028d0 <malloc>:
 80028d0:	4b02      	ldr	r3, [pc, #8]	; (80028dc <malloc+0xc>)
 80028d2:	4601      	mov	r1, r0
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	f000 b823 	b.w	8002920 <_malloc_r>
 80028da:	bf00      	nop
 80028dc:	20000058 	.word	0x20000058

080028e0 <sbrk_aligned>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4e0e      	ldr	r6, [pc, #56]	; (800291c <sbrk_aligned+0x3c>)
 80028e4:	460c      	mov	r4, r1
 80028e6:	6831      	ldr	r1, [r6, #0]
 80028e8:	4605      	mov	r5, r0
 80028ea:	b911      	cbnz	r1, 80028f2 <sbrk_aligned+0x12>
 80028ec:	f000 f8c0 	bl	8002a70 <_sbrk_r>
 80028f0:	6030      	str	r0, [r6, #0]
 80028f2:	4621      	mov	r1, r4
 80028f4:	4628      	mov	r0, r5
 80028f6:	f000 f8bb 	bl	8002a70 <_sbrk_r>
 80028fa:	1c43      	adds	r3, r0, #1
 80028fc:	d00a      	beq.n	8002914 <sbrk_aligned+0x34>
 80028fe:	1cc4      	adds	r4, r0, #3
 8002900:	f024 0403 	bic.w	r4, r4, #3
 8002904:	42a0      	cmp	r0, r4
 8002906:	d007      	beq.n	8002918 <sbrk_aligned+0x38>
 8002908:	1a21      	subs	r1, r4, r0
 800290a:	4628      	mov	r0, r5
 800290c:	f000 f8b0 	bl	8002a70 <_sbrk_r>
 8002910:	3001      	adds	r0, #1
 8002912:	d101      	bne.n	8002918 <sbrk_aligned+0x38>
 8002914:	f04f 34ff 	mov.w	r4, #4294967295
 8002918:	4620      	mov	r0, r4
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	200000fc 	.word	0x200000fc

08002920 <_malloc_r>:
 8002920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002924:	1ccd      	adds	r5, r1, #3
 8002926:	f025 0503 	bic.w	r5, r5, #3
 800292a:	3508      	adds	r5, #8
 800292c:	2d0c      	cmp	r5, #12
 800292e:	bf38      	it	cc
 8002930:	250c      	movcc	r5, #12
 8002932:	2d00      	cmp	r5, #0
 8002934:	4607      	mov	r7, r0
 8002936:	db01      	blt.n	800293c <_malloc_r+0x1c>
 8002938:	42a9      	cmp	r1, r5
 800293a:	d905      	bls.n	8002948 <_malloc_r+0x28>
 800293c:	230c      	movs	r3, #12
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	2600      	movs	r6, #0
 8002942:	4630      	mov	r0, r6
 8002944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002948:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002a1c <_malloc_r+0xfc>
 800294c:	f000 f868 	bl	8002a20 <__malloc_lock>
 8002950:	f8d8 3000 	ldr.w	r3, [r8]
 8002954:	461c      	mov	r4, r3
 8002956:	bb5c      	cbnz	r4, 80029b0 <_malloc_r+0x90>
 8002958:	4629      	mov	r1, r5
 800295a:	4638      	mov	r0, r7
 800295c:	f7ff ffc0 	bl	80028e0 <sbrk_aligned>
 8002960:	1c43      	adds	r3, r0, #1
 8002962:	4604      	mov	r4, r0
 8002964:	d155      	bne.n	8002a12 <_malloc_r+0xf2>
 8002966:	f8d8 4000 	ldr.w	r4, [r8]
 800296a:	4626      	mov	r6, r4
 800296c:	2e00      	cmp	r6, #0
 800296e:	d145      	bne.n	80029fc <_malloc_r+0xdc>
 8002970:	2c00      	cmp	r4, #0
 8002972:	d048      	beq.n	8002a06 <_malloc_r+0xe6>
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	4631      	mov	r1, r6
 8002978:	4638      	mov	r0, r7
 800297a:	eb04 0903 	add.w	r9, r4, r3
 800297e:	f000 f877 	bl	8002a70 <_sbrk_r>
 8002982:	4581      	cmp	r9, r0
 8002984:	d13f      	bne.n	8002a06 <_malloc_r+0xe6>
 8002986:	6821      	ldr	r1, [r4, #0]
 8002988:	1a6d      	subs	r5, r5, r1
 800298a:	4629      	mov	r1, r5
 800298c:	4638      	mov	r0, r7
 800298e:	f7ff ffa7 	bl	80028e0 <sbrk_aligned>
 8002992:	3001      	adds	r0, #1
 8002994:	d037      	beq.n	8002a06 <_malloc_r+0xe6>
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	442b      	add	r3, r5
 800299a:	6023      	str	r3, [r4, #0]
 800299c:	f8d8 3000 	ldr.w	r3, [r8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d038      	beq.n	8002a16 <_malloc_r+0xf6>
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	42a2      	cmp	r2, r4
 80029a8:	d12b      	bne.n	8002a02 <_malloc_r+0xe2>
 80029aa:	2200      	movs	r2, #0
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	e00f      	b.n	80029d0 <_malloc_r+0xb0>
 80029b0:	6822      	ldr	r2, [r4, #0]
 80029b2:	1b52      	subs	r2, r2, r5
 80029b4:	d41f      	bmi.n	80029f6 <_malloc_r+0xd6>
 80029b6:	2a0b      	cmp	r2, #11
 80029b8:	d917      	bls.n	80029ea <_malloc_r+0xca>
 80029ba:	1961      	adds	r1, r4, r5
 80029bc:	42a3      	cmp	r3, r4
 80029be:	6025      	str	r5, [r4, #0]
 80029c0:	bf18      	it	ne
 80029c2:	6059      	strne	r1, [r3, #4]
 80029c4:	6863      	ldr	r3, [r4, #4]
 80029c6:	bf08      	it	eq
 80029c8:	f8c8 1000 	streq.w	r1, [r8]
 80029cc:	5162      	str	r2, [r4, r5]
 80029ce:	604b      	str	r3, [r1, #4]
 80029d0:	4638      	mov	r0, r7
 80029d2:	f104 060b 	add.w	r6, r4, #11
 80029d6:	f000 f829 	bl	8002a2c <__malloc_unlock>
 80029da:	f026 0607 	bic.w	r6, r6, #7
 80029de:	1d23      	adds	r3, r4, #4
 80029e0:	1af2      	subs	r2, r6, r3
 80029e2:	d0ae      	beq.n	8002942 <_malloc_r+0x22>
 80029e4:	1b9b      	subs	r3, r3, r6
 80029e6:	50a3      	str	r3, [r4, r2]
 80029e8:	e7ab      	b.n	8002942 <_malloc_r+0x22>
 80029ea:	42a3      	cmp	r3, r4
 80029ec:	6862      	ldr	r2, [r4, #4]
 80029ee:	d1dd      	bne.n	80029ac <_malloc_r+0x8c>
 80029f0:	f8c8 2000 	str.w	r2, [r8]
 80029f4:	e7ec      	b.n	80029d0 <_malloc_r+0xb0>
 80029f6:	4623      	mov	r3, r4
 80029f8:	6864      	ldr	r4, [r4, #4]
 80029fa:	e7ac      	b.n	8002956 <_malloc_r+0x36>
 80029fc:	4634      	mov	r4, r6
 80029fe:	6876      	ldr	r6, [r6, #4]
 8002a00:	e7b4      	b.n	800296c <_malloc_r+0x4c>
 8002a02:	4613      	mov	r3, r2
 8002a04:	e7cc      	b.n	80029a0 <_malloc_r+0x80>
 8002a06:	230c      	movs	r3, #12
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4638      	mov	r0, r7
 8002a0c:	f000 f80e 	bl	8002a2c <__malloc_unlock>
 8002a10:	e797      	b.n	8002942 <_malloc_r+0x22>
 8002a12:	6025      	str	r5, [r4, #0]
 8002a14:	e7dc      	b.n	80029d0 <_malloc_r+0xb0>
 8002a16:	605b      	str	r3, [r3, #4]
 8002a18:	deff      	udf	#255	; 0xff
 8002a1a:	bf00      	nop
 8002a1c:	200000f8 	.word	0x200000f8

08002a20 <__malloc_lock>:
 8002a20:	4801      	ldr	r0, [pc, #4]	; (8002a28 <__malloc_lock+0x8>)
 8002a22:	f000 b85f 	b.w	8002ae4 <__retarget_lock_acquire_recursive>
 8002a26:	bf00      	nop
 8002a28:	2000023c 	.word	0x2000023c

08002a2c <__malloc_unlock>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	; (8002a34 <__malloc_unlock+0x8>)
 8002a2e:	f000 b85a 	b.w	8002ae6 <__retarget_lock_release_recursive>
 8002a32:	bf00      	nop
 8002a34:	2000023c 	.word	0x2000023c

08002a38 <memset>:
 8002a38:	4402      	add	r2, r0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <strncpy>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	3901      	subs	r1, #1
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	b132      	cbz	r2, 8002a5e <strncpy+0x16>
 8002a50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002a54:	f803 4b01 	strb.w	r4, [r3], #1
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	2c00      	cmp	r4, #0
 8002a5c:	d1f7      	bne.n	8002a4e <strncpy+0x6>
 8002a5e:	441a      	add	r2, r3
 8002a60:	2100      	movs	r1, #0
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d100      	bne.n	8002a68 <strncpy+0x20>
 8002a66:	bd10      	pop	{r4, pc}
 8002a68:	f803 1b01 	strb.w	r1, [r3], #1
 8002a6c:	e7f9      	b.n	8002a62 <strncpy+0x1a>
	...

08002a70 <_sbrk_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	4d06      	ldr	r5, [pc, #24]	; (8002a8c <_sbrk_r+0x1c>)
 8002a74:	2300      	movs	r3, #0
 8002a76:	4604      	mov	r4, r0
 8002a78:	4608      	mov	r0, r1
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	f7fd ffbc 	bl	80009f8 <_sbrk>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_sbrk_r+0x1a>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_sbrk_r+0x1a>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	20000238 	.word	0x20000238

08002a90 <__errno>:
 8002a90:	4b01      	ldr	r3, [pc, #4]	; (8002a98 <__errno+0x8>)
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000058 	.word	0x20000058

08002a9c <__libc_init_array>:
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	4d0d      	ldr	r5, [pc, #52]	; (8002ad4 <__libc_init_array+0x38>)
 8002aa0:	4c0d      	ldr	r4, [pc, #52]	; (8002ad8 <__libc_init_array+0x3c>)
 8002aa2:	1b64      	subs	r4, r4, r5
 8002aa4:	10a4      	asrs	r4, r4, #2
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	42a6      	cmp	r6, r4
 8002aaa:	d109      	bne.n	8002ac0 <__libc_init_array+0x24>
 8002aac:	4d0b      	ldr	r5, [pc, #44]	; (8002adc <__libc_init_array+0x40>)
 8002aae:	4c0c      	ldr	r4, [pc, #48]	; (8002ae0 <__libc_init_array+0x44>)
 8002ab0:	f000 f81a 	bl	8002ae8 <_init>
 8002ab4:	1b64      	subs	r4, r4, r5
 8002ab6:	10a4      	asrs	r4, r4, #2
 8002ab8:	2600      	movs	r6, #0
 8002aba:	42a6      	cmp	r6, r4
 8002abc:	d105      	bne.n	8002aca <__libc_init_array+0x2e>
 8002abe:	bd70      	pop	{r4, r5, r6, pc}
 8002ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac4:	4798      	blx	r3
 8002ac6:	3601      	adds	r6, #1
 8002ac8:	e7ee      	b.n	8002aa8 <__libc_init_array+0xc>
 8002aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ace:	4798      	blx	r3
 8002ad0:	3601      	adds	r6, #1
 8002ad2:	e7f2      	b.n	8002aba <__libc_init_array+0x1e>
 8002ad4:	08002b5c 	.word	0x08002b5c
 8002ad8:	08002b5c 	.word	0x08002b5c
 8002adc:	08002b5c 	.word	0x08002b5c
 8002ae0:	08002b60 	.word	0x08002b60

08002ae4 <__retarget_lock_acquire_recursive>:
 8002ae4:	4770      	bx	lr

08002ae6 <__retarget_lock_release_recursive>:
 8002ae6:	4770      	bx	lr

08002ae8 <_init>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr

08002af4 <_fini>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	bf00      	nop
 8002af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afa:	bc08      	pop	{r3}
 8002afc:	469e      	mov	lr, r3
 8002afe:	4770      	bx	lr
